1、centos 7.5 安装
①卸载旧版本
sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine
②安装依赖的软件包
sudo yum install -y yum-utils device-mapper-persistent-data lvm2
③添加Docker文档版本的yum源
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
④安装最新版本的docker引擎(社区版)
sudo yum -y install docker-ce docker-ce-cli containerd.io
⑤把普通用户添加到docker 组
sudo usermod -aG docker ludonghua
⑥启动Docker服务
sudo systemctl start docker
⑦配置国内镜像源地址
sudo mkdir -p /etc/docker
sudo vim /etc/docker/daemon.json
{
  "registry-mirrors": ["https://3v3557j2.mirror.aliyuncs.com"]
}
sudo systemctl daemon-reload
sudo systemctl restart docker

⑧测试docker run hello-world

2、镜像命令
①帮助命令
docker version
docker info
docker --help

②镜像命令
docker images 列出本地主机上的镜像
    -a 列出本地所有的镜像(含中间映像层)
    -q 只显示镜像ID
    --digests 显示镜像的摘要信息
    --no-trunc 显示完整的镜像信息
docker search 某个xxx镜像名字
    -s 列出收藏数不小于指定值的镜像
docker pull 某个xxx镜像名字
docker rmi 某个xxx镜像名字ID
    -f 强制删除
    -f $(docker images -qa) 全部删除

③容器命令
docker pull centos
新建并启动容器 docker run
    --name="容器新名字"，为容器指定一个名称
    -d 后台运行容器，并返回容器ID，即启动守护式容器
    -i 以交互模式运行容器，通常与-t同时使用
    -t 为容器重新分配一个伪终端，通常与-i同时使用
    -P 随机端口映射
    -p 指定端口映射，有一下四种格式
        ip:hostPort:containerPort
        ip::containerPort
        hostPort:containerPort
        containerPort
    docker run -it 5d0da3dc9764
列出当前所有正在运行的容器 docker ps
    -a 列出当前所有正在运行的容器+历史上运行过的
    -l 显示最近创建的容器
    -n 显示最近n个创建的容器
    -q 静默模式，只显示容器编号
    --no-trunc 不截断输出
退出容器
    exit 容器停止退出
    ctrl+P+Q 容器不停止退出
启动容器 docker start 容器ID或容器名
重启容器 docker restart 容器ID或容器名
停止容器 docker stop 容器ID或容器名
强制停止容器 docker kill 容器ID或容器名
删除已停止的容器 docker rm 容器ID容器ID或容器名
    docker rm -f $(docker ps -a -q)
    docker ps -a -q | xargs docker rm
容器导出
docker export 02de0e238a92 > abcd.tar
导入成镜像
cat abcd.tar | docker import - ldh/ubuntu:3.7

重要
启动守护式容器 docker run -d 容器名
查看容器日志 docker logs -f -t --tail 容器ID
查看容器内运行的进程 docker top 容器ID
查看容器内部细节 docker inspect 容器ID
进入正在运行的容器并以命令行交互
    docker exec -it 容器ID bashShell 在容器中打开新的终端，并可以启动新的进程
    重新进去 docker attach 容器ID 直接进入容器启动命令的终端，不会启动新的进程
从容器内拷贝文件到主机内 docker cp 容器ID:容器内路径 日的主机路径

3、commit
docker run -it -p 8888:8080 tomcat
docker commit -a="ludonghua" -m="miaoshu" 75c1c9400e5f ldh/tomcat:88

docker commit -a ludonghua -m "miaoshu" ec8d3c726f9e mycentos:1.4
docker login --username=luis_0270 registry.cn-hangzhou.aliyuncs.com
docker tag 6dbe13daba23 registry.cn-hangzhou.aliyuncs.com/ludonghua/mycentos:1.4
docker push registry.cn-hangzhou.aliyuncs.com/ludonghua/mycentos:1.4

docker rm -f $(docker ps -q)
docker run -it -p 8888:8080 ldh/tomcat:88

4、容器卷
docker run -it -v /home/ludonghua:/datavo -privileged=true centos
只读
docker run -it -v /home/ludonghua:/datavo:ro centos

5、DockerFile
vim /home/ludonghua/mydocker/Dockerfile
FROM centos
VOLUME ["/datavo1","/datavo2"]
CMD echo "success!"
CMD /bin/bash

docker build -f /home/ludonghua/mydocker/Dockerfile -t ldh/centos .
docker run -it ldh/centos /bin/bash

继承容器卷
docker run -it --name ldh1 ldh/centos
docker run -it --name ldh2 --volumes-from ldh1 ldh/centos

FROM 基础镜像，当前新镜像是基于哪个镜像的
MAINTAINER 镜像维护者的姓名和邮箱地址
RUN 容器构建是需要运行的命令
EXPOSE 当前容器对外暴露出的端口号
WORKDIR 指定在创建容器后，终端默认登录的进来工作目录，一个落脚点
ENV 用来在建构镜像过程中设置环境变量
ADD 在宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包
COPY 类似ADD，拷贝文件和目录到镜像中。将从构建上下文目录中<源路径>的文件/目录复制到新的一层的镜像内的<目标路径>位置
VOLUME 容器数据卷，用于数据保存和持久化工作
CMD 指定一个容器启动时要运行的命令。Dockerfile中可以有多个CMD命令，但只有最后一个生效，CMD会被docker run之后的参数替换
ENTRYPOINT 指定一个容器启动时要运行的命令。ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及参数
ONBUILD 当构建一个被继承的Dockerfile时运行命令，父镜像在被子镜像继承后父镜像的onbuild被触发

vim /home/ludonghua/mydocker/Dockerfile2
FROM centos:7.6.1810
MAINTAINER ludonghua<ludonghua@126.com>

ENV mypath /tmp
WORKDIR $mypath

RUN yum -y install vim
RUN yum -y install net-tools

EXPOSE 80
CMD /bin/bash

docker build  -f /home/ludonghua/mydocker/Dockerfile2 -t mycentos:1.3 .
docker run -it mycentos:1.3
docker history mycentos:1.3

6、安装组件
tomcat
docker pull billygoo/tomcat8-jdk8
docker run -d -p 8080:8080 --name mytomcat8 billygoo/tomcat8-jdk8

mysql
docker pull mysql:5.7
docker run -p 3306:3306 --privileged=true \
-v /opt/docker/mysql/conf:/etc/mysql/conf.d \
-v /opt/docker/mysql/logs:/logs \
-v /opt/docker/mysql/data:/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD=123123 \
--name mysql \
-d mysql:5.7

mysql字符集问题
SHOW VARIABLES LIKE 'character%';
解决办法
vim /opt/docker/mysql/conf/my.conf
[client]
default_character_set=utf8
[mysqld]
collation_server = utf8_general_ci
character_set_server = utf8

主从mysql
docker run -p 3307:3306 --name mysql-master \
-v /opt/docker/mysql-master/log:/var/log/mysql \
-v /opt/docker/mysql-master/data:/var/lib/mysql \
-v /opt/docker/mysql-master/conf:/etc/mysql \
-e MYSQL_ROOT_PASSWORD=123123 \
-d mysql:5.7

vim /opt/docker/mysql-master/conf/my.cnf
[mysqld]
## 设置server_id，同一局域网中需要唯一
server_id=101
## 指定不需要同步的数据库名称
binlog-ignore-db=mysql
## 开启二进制日志功能
log-bin=mall-mysql-bin
## 设置二进制日志使用内存大小（事务）
binlog_cache_size=1M
## 设置使用的二进制日志格式（mixed,statement,row）
binlog_format=mixed
## 二进制日志过期清理时间。默认值为0，表示不自动清理。
expire_logs_days=7
## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。
## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
slave_skip_errors=1062

master建从账号
CREATE USER 'slave'@'%' IDENTIFIED BY '123123';
GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%';

docker run -p 3308:3306 --name mysql-slave \
-v /opt/docker/mysql-slave/log:/var/log/mysql \
-v /opt/docker/mysql-slave/data:/var/lib/mysql \
-v /opt/docker/mysql-slave/conf:/etc/mysql \
-e MYSQL_ROOT_PASSWORD=123123 \
-d mysql:5.7

vim /opt/docker/mysql-slave/conf/my.cnf
[mysqld]
## 设置server_id，同一局域网中需要唯一
server_id=102
## 指定不需要同步的数据库名称
binlog-ignore-db=mysql
## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用
log-bin=mall-mysql-slave1-bin
## 设置二进制日志使用内存大小（事务）
binlog_cache_size=1M
## 设置使用的二进制日志格式（mixed,statement,row）
binlog_format=mixed
## 二进制日志过期清理时间。默认值为0，表示不自动清理。
expire_logs_days=7
## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。
## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
slave_skip_errors=1062
## relay_log配置中继日志
relay_log=mall-mysql-relay-bin
## log_slave_updates表示slave将复制事件写进自己的二进制日志
log_slave_updates=1
## slave设置为只读（具有super权限的用户除外）
read_only=1

show master status; 拿到binlog位置
change master to master_host='192.168.202.102', master_user='slave', master_password='123123', master_port=3307, master_log_file='mall-mysql-bin.000003', master_log_pos=617, master_connect_retry=30;

start slave;

show slave status;

redis
docker pull redis:6.0.8
docker run -p 6379:6379 \
--name redis \
--privileged=true \
-v /opt/docker/redis/redis.conf:/etc/redis/redis.conf \
-v /opt/docker/redis/data:/data \
-d redis:6.0.8 redis-server /etc/redis/redis.conf

redis-cluster
docker run -d --name redis-node-1 --net host --privileged=true -v /opt/docker/redis-cluster/share/redis-node-1:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6381
docker run -d --name redis-node-2 --net host --privileged=true -v /opt/docker/redis-cluster/share/redis-node-2:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6382
docker run -d --name redis-node-3 --net host --privileged=true -v /opt/docker/redis-cluster/share/redis-node-3:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6383
docker run -d --name redis-node-4 --net host --privileged=true -v /opt/docker/redis-cluster/share/redis-node-4:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6384
docker run -d --name redis-node-5 --net host --privileged=true -v /opt/docker/redis-cluster/share/redis-node-5:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6385
docker run -d --name redis-node-6 --net host --privileged=true -v /opt/docker/redis-cluster/share/redis-node-6:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6386

//注意，进入docker容器后才能执行一下命令，且注意自己的真实IP地址
--cluster-replicas 1 表示为每个master创建一个slave节点
redis-cli --cluster create 192.168.202.102:6381 192.168.202.102:6382 192.168.202.102:6383 192.168.202.102:6384 192.168.202.102:6385 192.168.202.102:6386 --cluster-replicas 1

cluster info
cluster nodes

redis0cli - p 6381 - c

redis-cli --cluster check 192.168.202.102:6381

增加节点
docker run -d --name redis-node-7 --net host --privileged=true -v /opt/docker/redis-cluster/share/redis-node-7:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6387
docker run -d --name redis-node-8 --net host --privileged=true -v /opt/docker/redis-cluster/share/redis-node-8:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6388

将新增的6387作为master节点加入集群
redis-cli --cluster add-node 192.168.202.102:6387 192.168.202.102:6381
6387就是将要作为master新增节点6381 就是原来集群节点里面的领路人，相当于6387拜拜6381的码头从而找到组织加入集群

重新分派槽号命令:
redis-cli --cluster reshard 192.168.202.102:6381

命令：
redis-cli --cluster add-node 192.168.202.102:6388 192.168.202.102:6387 --cluster-slave --cluster-master-id 新主机节点ID --这个是6387的编号，按照自己实际情况

缩容
--cluster del-node 192.168.202.102:6388 5d149074b7e57b802287d1797a874ed7a1a284a8

redis-cli --cluster reshard 192.168.202.102:6381

redis-cli --cluster del-node 192.168.202.102:6387 e4781f644d4a4e4d4b4d107157b9ba8144631451

微服务
docker-boot
docker build -t ldh-docker:1.6 .

docker run -d -p 6001:6001 7b36d6ba26a7


Docker-compose容器编排
安装
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version

Docker轻量级可视化工具Portainer
docker run -d -p 8000:8000 -p 9000:9000 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer

vim /home/ludonghua/mydocker/cig/docker-compose.yml
version: '3.1'
 
volumes:
  grafana_data: {}
 
services:
 influxdb:
  image: tutum/influxdb:0.9
  restart: always
  environment:
    - PRE_CREATE_DB=cadvisor
  ports:
    - "8083:8083"
    - "8086:8086"
  volumes:
    - ./data/influxdb:/data
 
 cadvisor:
  image: google/cadvisor
  links:
    - influxdb:influxsrv
  command: -storage_driver=influxdb -storage_driver_db=cadvisor -storage_driver_host=influxsrv:8086
  restart: always
  ports:
    - "8080:8080"
  volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
 
 grafana:
  user: "104"
  image: grafana/grafana
  user: "104"
  restart: always
  links:
    - influxdb:influxsrv
  ports:
    - "3000:3000"
  volumes:
    - grafana_data:/var/lib/grafana
  environment:
    - HTTP_USER=admin
    - HTTP_PASS=admin
    - INFLUXDB_HOST=influxsrv
    - INFLUXDB_PORT=8086
    - INFLUXDB_NAME=cadvisor
    - INFLUXDB_USER=root
    - INFLUXDB_PASS=root

docker-compose config -q
docker-compose up